{"version":3,"sources":["components/TodoItem.js","todoData.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","props","className","type","id","item","checked","completed","onChange","handleClick","style","textDecoration","text","todoData","App","state","todos","bind","this","setState","prevState","updateTodo","map","todo","localStorage","setItem","JSON","stringify","getItem","parse","todoList","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAeeA,MAbf,SAAkBC,GACd,OACI,sBAAKC,UAAU,YAAf,UACI,uBAAOC,KAAK,WACRC,GAAIH,EAAMI,KAAKD,GACfE,QAASL,EAAMI,KAAKE,UACpBC,SAAU,WAAOP,EAAMQ,YAAYR,EAAMI,KAAKD,OAElD,uBAAOM,MAAO,CAACC,eAAiBV,EAAMI,KAAKE,UAAa,eAAiB,IAAzE,SAAgFN,EAAMI,KAAKO,WCuBxFC,EAjCE,CACb,CACIT,GAAI,EACJQ,KAAM,qBACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,mBACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,mBACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,WACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,mCACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,cACNL,WAAW,IC6BJO,E,kDArDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAOH,GAET,EAAKJ,YAAc,EAAKA,YAAYQ,KAAjB,gBALP,E,wDAQFb,GACVc,KAAKC,UAAS,SAACC,GAEb,IAAMC,EAAaD,EAAUJ,MAAMM,KAAI,SAAAC,GACrC,OAAGA,EAAKnB,KAAOA,EACN,2BACJmB,GADH,IAEAhB,WAAYgB,EAAKhB,YAGZgB,KAGT,MAAO,CACLP,MAAOK,EACPG,aAAcA,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAUN,U,0CAMvEG,aAAaI,QAAQ,oBACtBV,KAAKC,SAAS,CACZH,MAAOU,KAAKG,MAAML,aAAaI,QAAQ,uBAIzCV,KAAKC,SAAS,CACZH,MAAOH,M,+BAKH,IAAD,OAEDiB,EAAWZ,KAAKH,MAAMC,MAAMM,KAAI,SAAAjB,GAAI,OAAI,cAAC,EAAD,CAAwBA,KAAMA,EAAMI,YAAa,EAAKA,aAAvCJ,EAAKD,OAElE,OACE,qBAAKF,UAAU,YAAf,SACK4B,Q,GAhDOC,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.80070bfb.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction TodoItem(props) {\n    return (\n        <div className=\"todo-item\">\n            <input type=\"checkbox\"\n                id={props.item.id}\n                checked={props.item.completed}\n                onChange={() => {props.handleClick(props.item.id)}}\n            />\n            <label style={{textDecoration: (props.item.completed) ? \"line-through\" : \"\" }}>{props.item.text}</label>\n        </div>\n    )\n}\n\nexport default TodoItem","const todoData = [\n    {\n        id: 1,\n        text: \"Take out the trash\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Arrested Development\",\n        completed: false\n    },\n    {\n        id: 6,\n        text: \"Finish Book\",\n        completed: false\n    }\n]\n\nexport default todoData","import React from \"react\"\nimport TodoItem from \"./components/TodoItem\"\nimport todoData from \"./todoData\"\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      todos: todoData\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick(id) {\n    this.setState((prevState) => {\n\n      const updateTodo = prevState.todos.map(todo => {\n        if(todo.id === id) {\n          return {\n          ...todo,\n          completed: !todo.completed\n          }\n        }\n        return todo\n      })\n\n      return {\n        todos: updateTodo,\n        localStorage: localStorage.setItem(\"local-todo-state\", JSON.stringify(updateTodo))\n      }\n    })\n  }\n\n  componentDidMount() {\n    if(localStorage.getItem(\"local-todo-state\")){\n      this.setState({\n        todos: JSON.parse(localStorage.getItem(\"local-todo-state\"))\n      })\n    }\n    else{\n      this.setState({\n        todos: todoData\n      })\n    }\n  }\n  \n  render() {\n\n    const todoList = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleClick={this.handleClick}/>)\n\n    return (\n      <div className=\"todo-list\">\n          {todoList}\n      </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}