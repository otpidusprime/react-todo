{"version":3,"sources":["components/TodoItem.js","todoData.js","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","props","className","type","id","item","checked","completed","onChange","handleClick","style","textDecoration","text","todoData","App","useState","todos","setTodos","useEffect","LOCAL_TODO","localStorage","getItem","JSON","parse","setItem","stringify","prevTodos","map","todo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAeeA,MAbf,SAAkBC,GACd,OACI,sBAAKC,UAAU,YAAf,UACI,uBAAOC,KAAK,WACRC,GAAIH,EAAMI,KAAKD,GACfE,QAASL,EAAMI,KAAKE,UACpBC,SAAU,WAAOP,EAAMQ,YAAYR,EAAMI,KAAKD,OAElD,uBAAOM,MAAO,CAACC,eAAiBV,EAAMI,KAAKE,UAAa,eAAiB,IAAzE,SAAgFN,EAAMI,KAAKO,WCuBxFC,EAjCE,CACb,CACIT,GAAI,EACJQ,KAAM,qBACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,mBACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,mBACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,WACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,mCACNL,WAAW,GAEf,CACIH,GAAI,EACJQ,KAAM,cACNL,WAAW,ICyCJO,MAlEf,WAAgB,IAAD,EAEaC,mBAASF,GAFtB,mBAENG,EAFM,KAECC,EAFD,KAWbC,qBAAU,WACR,IAAMC,EAAaC,aAAaC,QAAQ,cACxCF,GAAcF,EAASK,KAAKC,MAAMJ,MACjC,IAEHD,qBAAU,WACRE,aAAaI,QAAQ,aAAcF,KAAKG,UAAUT,OAGpD,IAAMP,EAAc,SAACL,GACnBa,GAAS,SAAAS,GAUL,OATiBA,EAAUC,KAAI,SAAAC,GAC3B,OAAGA,EAAKxB,KAAOA,EACN,2BACFwB,GADL,IAEErB,WAAYqB,EAAKrB,YAGhBqB,SAMf,OACE,qBAAK1B,UAAU,YAAf,SACKc,EAAMW,KAAI,SAAAtB,GAAI,OAAI,cAAC,EAAD,CAAwBA,KAAMA,EAAMI,YAAaA,GAAlCJ,EAAKD,UC7BhCyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ab467a5b.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction TodoItem(props) {\n    return (\n        <div className=\"todo-item\">\n            <input type=\"checkbox\"\n                id={props.item.id}\n                checked={props.item.completed}\n                onChange={() => {props.handleClick(props.item.id)}}\n            />\n            <label style={{textDecoration: (props.item.completed) ? \"line-through\" : \"\" }}>{props.item.text}</label>\n        </div>\n    )\n}\n\nexport default TodoItem","const todoData = [\n    {\n        id: 1,\n        text: \"Take out the trash\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Arrested Development\",\n        completed: false\n    },\n    {\n        id: 6,\n        text: \"Finish Book\",\n        completed: false\n    }\n]\n\nexport default todoData","import React, { useState, useEffect } from \"react\"\nimport TodoItem from \"./components/TodoItem\"\nimport todoData from \"./todoData\"\n\nfunction App() {\n\n  const [todos, setTodos] = useState(todoData)\n\n  // useEffect(() => {\n  //   if(\"local-todo\" in localStorage) {\n  //     const LOCAL_TODO = JSON.parse(localStorage.getItem(\"local-todo\"))\n  //     setTodos(LOCAL_TODO)\n  //   }\n  // },[])\n\n  useEffect(() => {\n    const LOCAL_TODO = localStorage.getItem(\"local-todo\")\n    LOCAL_TODO && setTodos(JSON.parse(LOCAL_TODO))\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"local-todo\", JSON.stringify(todos))\n  })\n\n  const handleClick = (id) => {\n    setTodos(prevTodos => {\n      const updateTodo = prevTodos.map(todo => {\n            if(todo.id === id) {\n              return {\n                ...todo,\n                completed: !todo.completed\n              }\n            }\n          return todo\n        })\n        return updateTodo\n    })\n  }\n\n  return (\n    <div className=\"todo-list\">\n        {todos.map(item => <TodoItem key={item.id} item={item} handleClick={handleClick}/>)}\n    </div>\n  )\n\n}\n\n// class App extends React.Component {\n\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if(prevState.todos !== this.state.todos) {\n//       this.setState({\n//         localStorage: localStorage.setItem(\"local-todo\", JSON.stringify(this.state.todos))\n//       })\n//     }\n//   }\n  \n//   render() {\n\n//     const todoList = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleClick={this.handleClick}/>)\n\n//     return (\n//       <div className=\"todo-list\">\n//           {todoList}\n//       </div>\n//     )\n//   }\n// }\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}